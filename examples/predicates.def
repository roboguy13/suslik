predicate lseg(loc x, set s) {
|  x == null        => { s =i {} ; emp }
|  not (x == null)  => { s =i {v} ++ s1 ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** lseg(nxt, s1) }
}

predicate lseg3(loc x, set s) {
|  x == null        => { s =i {} ; emp }
|  not (x == null)  => { s =i {v} ++ s1 ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** lseg3(nxt, s1) }
}

predicate lseg2(loc x, set s) {
|  x == null        => { s =i {} ; emp }
|  not (x == null)  => { s =i {v} ++ s1 ; [x, 3] ** x :-> v ** (x + 1) :-> (v + 1) ** (x + 2) :-> nxt ** lseg2(nxt, s1) }
}

predicate tree(loc x, set s) {
|  x == null        => {s =i {}; emp}
|  not (x == null)  => {s =i {v} ++ s1 ++ s2 ; [x, 3] ** x :-> v ** (x + 1) :-> l ** (x + 2) :-> r ** tree(l, s1) ** tree(r, s2)}
}

predicate srtl(loc x, int len, int lo, int hi) {
|  x == null        => { len == 0  /\  lo == 7  /\  hi == 0 ; emp }
|  not (x == null)  => { len == 1 + len1  /\  0 <= len1  /\  lo == (v <= lo1 ? v : lo1)  /\  hi == (hi1 <= v ? v : hi1) /\ v <= lo1 /\ 0 <= v /\ v <= 7 ;
                      [x, 2] ** x :-> v ** (x + 1) :-> nxt ** srtl(nxt, len1, lo1, hi1) }
}

predicate sll(loc x, int len, int lo, int hi) {
|  x == null        => { len == 0  /\  lo == 7  /\  hi == 0 ; emp }
|  not (x == null)  => { len == 1 + len1  /\  0 <= len1  /\  lo == (v <= lo1 ? v : lo1)  /\  hi == (hi1 <= v ? v : hi1) /\ 0 <= v /\ v <= 7;
                      [x, 2] ** x :-> v ** (x + 1) :-> nxt ** sll(nxt, len1, lo1, hi1) }
}

predicate account(loc x, int id, int bal) {
|  true  =>  { [x, 2] ** x :-> id ** (x + 1) :-> bal }
}

predicate test_list(loc x, set s) {
| x == 0 => {s == {} ; emp}
| not (x == 0) => {s == {v} + s1 ; (x + 1) :-> nxt ** x :-> v ** test_list(nxt, s1) ** [x, 2]}
}

predicate constrained_list(loc x, set s, pred p) {
|  x == null        => { s =i {} ; emp }
|  not (x == null)  => { s =i {v} ++ s1 && p(v) ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** constrained_list(nxt, s1, p) }
}

predicate constrained_list2(loc x, set s, pred p) {
|  x == null        => { s =i {} ; emp }
|  not (x == null)  => { s =i {v} ++ s1 && p(v, r) ; [x, 2] ** x :-> r ** (x + 1) :-> nxt ** constrained_list2(nxt, s1, p) }
}


predicate constrained_coproducts(loc x, set s, pred p, pred q) {
| x == null => { s =i {} ; emp }
| not (x == null) => {
    s =i {v} ++ s1 && p(v, left) && q(v, right)
      ;
    [x, 3] **
    x :-> left **
    (x+1) :-> right **
    (x+2) :-> nxt **
    constrained_coproducts(nxt, s1, p, q)
  }
}

predicate split_le(loc x, set s, int sep) {
| x == null => { s =i {} ; emp }
| not (x == null) => {
    s =i {v} ++ s1 &&
    left  == (v <= sep ? v : 0) &&
    right == (v <= sep ? 0 : v)
      ;
    [x, 3] **
    x :-> left **
    (x+1) :-> right **
    (x+2) :-> nxt **
    split_le(nxt, s1, sep)
  }
}

predicate lower_bounded(loc x, set s, int lb) {
|  x == null        => { s =i {} ; emp }
|  not (x == null)  => { s =i {v} ++ s1 && lb <= v ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** lower_bounded(nxt, s1, lb) }
}


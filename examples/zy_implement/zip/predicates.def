predicate zipped(loc x, loc y, loc r, set lefts, set rights) {
| x == 0 && y == 0 => { r == null ; emp }
| y == 0 && not (x == 0) => { r == null ; sll(x, lefts) }
| x == 0 && not (y == 0) => { r == null ; sll(y, rights) }
| (not (x == 0)) && (not (y == 0)) => {
    lefts =i {a} ++ lefts1 &&
    rights =i {b} ++ rights1 
      ;
    [x, 2] ** x :-> a ** (x+1) :-> nxtX **
    [y, 2] ** y :-> b ** (y+1) :-> nxtY **
    [r, 2] ** func f(a, b, r) ** (r+1) :-> nxtR ** zipped(nxtX, nxtY, nxtR, lefts1, rights1)
  }
}

predicate sll(loc x, set s) {
| x == null => { s =i {} ; emp }
| not (x == null) => { s =i {v} ++ s1 ; [x, 2] ** x :-> v ** (x+1) :-> nxt ** sll(nxt, s1) }
}
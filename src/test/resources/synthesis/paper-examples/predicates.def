predicate g_lseg(loc x, set s, pred p) {
|  x == y => { s =i {} ; emp }
|  not (x == y) => { s =i {v} ++ s1 ; p(x, v, nxt) ** x :-> v ** g_lseg(nxt, s1) }
}

synonym lseg(loc x, loc y, set s) {
  g_lseg(x, s,
    pred(currX, v, nxt) => [currX, 2] ** (currX + 1) :-> nxt)
}

synonym lseg2(loc x, set s) {
  g_lseg(x, s,
    pred(currX, v, nxt) => [currX, 3] ** (x + 1) :-> v + 1 ** (x + 2) :-> nxt)
}













// predicate lseg(loc x, loc y, set s) {
// |  x == y        => { s =i {} ; emp }
// |  not (x == y)  => { s =i {v} ++ s1 ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** lseg(nxt, y, s1) }
// }

// predicate lseg2(loc x, set s) {
// |  x == 0        => { s =i {} ; emp }
// |  not (x == 0)  => { s =i {v} ++ s1 ; [x, 3] ** x :-> v ** (x + 1) :-> v + 1 ** (x + 2) :-> nxt ** lseg2(nxt, s1) }
// }


predicate dll(loc x, loc z, set s) {
|  x == 0 => { s =i {} ; emp }
|  not (x == 0) =>
   { s =i {v} ++ s1 ; [x, 3] ** x :-> v ** (x + 1) :-> w ** (x + 2) :-> z ** dll(w, x, s1) }
}

predicate sll(loc x, set s) {
|  x == 0        => { s =i {} ; emp }
|  not (x == 0)  => { s =i {v} ++ s1 ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** sll(nxt, s1) }
}

predicate lseg(loc x, loc y) {
|  x == y        => {emp}
|  not (x == y)  => {[x, 2] ** x :-> 0 ** (x + 1) :-> nxt ** lseg(nxt, y)}
}

predicate lseg1(loc x, loc y) {
|  x == y        => {emp}
|  not (x == y)  => {[x, 2] ** x :-> 1 ** (x + 1) :-> nxt ** lseg1(nxt, y)}
}

predicate g_lseg(loc x, loc y, any acc, pred leafP, pred nodeP, pred spatial) {
|  x == y        => { leafP(acc) ; emp }
|  not (x == y)  => { nodeP(acc, acc1, x) ; spatial(x, v, nxt) ** g_lseg(nxt, y, acc1, leafP, nodeP, spatial) }
}

// synonym lsegn(loc x, loc y, int len) {
//   g_lseg(x, y, len,
//     pred(acc) => acc == 0,
//     pred(acc, acc1, currX) => (acc == 1 + acc1) /\ (0 <= acc1),
//     pred(currX, v, nxt) => [currX, 2] ** currX :-> v ** (currX + 1) :-> nxt)
// }

// synonym lsegs(loc x, loc y,

predicate lsegn(loc x, loc y, int len) {
|  x == y        => { len == 0 ; emp }
|  not (x == y)  => { (len == 1 + len1) /\ (0 <= len1) ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** lsegn(nxt, y, len1) }
}

// predicate lsegs(loc x, loc y, set s) {
// |  x == y  => { s == {} ; emp }
// |  x != y  => { s == {x} ++ s1 ; [x, 1] ** x :-> nxt ** lsegs(nxt, y, s1) }
// }


